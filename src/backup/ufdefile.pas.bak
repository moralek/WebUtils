unit UFdeFile;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, IniFiles, Dialogs, RichMemo, UMyUtils, Graphics,
  LazFileUtils,fileutil,UGlobales,Grids,ValEdit,ExtCtrls,LCLType,Forms,
  ComCtrls,UMyXml;
type
  TFdeFile=class
private
  QErrores:Integer;
  VarGlo:TGlobales;
  Utils:TMyUtils;
  Fila:Integer;
  Function  getTipo(FilaRead:String):String;
  Function  getDato(FilaRead:String):String;
  Function  MsgInf(Mensaje:String;var Color:Tcolor):String;
  Function  MsgUsr(Mensaje:String; var Color:Tcolor):String;
  Function  MsgOK(DatoOK:String;var Color:Tcolor;DatoAdicional:String=''):String;
  Function  MsgErr(DatoError,Mensaje:String;var Color:Tcolor):String;
  Function  CheckFile(FilePath:String):Boolean;
  Function  CheckDir(DirPath:String):Boolean;
  Procedure ProcesoSubDir(RutaBase:String;var Memo:TRichMemo;var TrayIcon1:TTrayIcon;var StatusBar1:TStatusBar);
  Procedure CHKFIL(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
  Procedure CHKDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
  Procedure CLRDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
  Procedure CREDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
  Procedure DELFIL(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
  Procedure DELDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
  Procedure SENDMSG(Texto:String;var Memo:TRichMemo;var TrayIcon1:TTrayIcon;var StatusBar1:TStatusBar;color:Tcolor = clDefault);
public
  fdefile:TIniFile;
  fdefilepath:string;
  Constructor create(path:String);
  Procedure Procesar(StringGrid1:TStringGrid;var Memo:TRichMemo;var TrayIcon1:TTrayIcon;var StatusBar1:TStatusBar);
  Procedure toValuelist(var ValueListEditor1:TValueListEditor);
  Procedure SaveFromValueList(ValueListEditor1:TValueListEditor);
  Procedure SaveFromStringGrid(StringGrid:TStringGrid);
  procedure Free;
  {MANEJADOR DE ARCHIVO .FDE}
  Function getRowCount():Integer;
  Function getRow(index:Integer):String;
end;

implementation
Constructor TFdeFile.create(path:String);
begin
//   inherited;
   QErrores:=0;
   fdefilepath:=path;
   fdefile:=TIniFile.Create(fdefilepath);
   Utils:=TMyUtils.Create;
   VarGlo:=TGlobales.Create;
end;

{ MENSAJES }
//
//OK: 	  cltGray
//ERROR:  clRed
//INF:	  clNone
//MSGUSR: clBlack
Function TFdeFile.MsgOK(DatoOK:String;var Color:Tcolor;DatoAdicional:String=''):String;
begin
   Color:=clLtGray;
   Result:=Format('%.2d',[Fila])+': ['+DatoOK+'], ok';
   If Not DatoAdicional.IsEmpty then
    Result:=Result+ ', '+DatoAdicional;
end;
Function TFdeFile.MsgErr(DatoError,Mensaje:String;var Color:Tcolor):String;
begin
   QErrores:=QErrores+1;
   Color:=clRed;
   Result:=Format('%.2d',[Fila])+': ['+DatoError+'], '+Mensaje;
end;
Function TFdeFile.MsgUsr(Mensaje:String;var Color:Tcolor):String;
begin
   Color:=clBlack;
   Result:=Format('%.2d',[Fila])+': '+Mensaje;
end;
Function TFdeFile.MsgInf(Mensaje:String;var Color:Tcolor):String;
begin
   Color:=clNone;
   Result:=Format('%.2d',[Fila])+': '+Mensaje;
end;
//---------------------------------------------------------------------------
Function TFdeFile.getTipo(FilaRead:String):String;
begin
   Filaread:=Trim(FilaRead);
   Result:=FilaRead.Substring(0,6).ToUpper;
end;
Function TFdeFile.getDato(FilaRead:String):String;
begin
   Filaread:=Trim(FilaRead);
   Result:=Trim(FilaRead.Substring(7));
end;



Procedure TFdeFile.Procesar(StringGrid1:TStringGrid;var Memo:TRichMemo;var TrayIcon1:TTrayIcon;var StatusBar1:TStatusBar);
var
 I,DirCount:Integer;
begin
   QErrores:=0;
   DirCount:=0;
   SENDMSG('Inicio ('+TimeToStr(Time)+')',Memo,TrayIcon1,StatusBar1);

   //PROCESA GRID WEBXML (StringGrid3)



   //PROCESA GRID FDE (StringGrid1)
   for I:= 1 to StringGrid1.RowCount - 1 do
   Begin
     If StringGrid1.Cells[0,i]='1' then
      Begin
        DirCount+=1;
        ProcesoSubDir(Utils.clearDirPath(StringGrid1.Cells[2,i]),Memo,TrayIcon1,StatusBar1);
      end;
   end;

   If DirCount=0 then
    begin
    QErrores:=QErrores+1;
    SENDMSG('Ningun Directorio Seleccionado.',Memo,TrayIcon1,StatusBar1,clRed);
    end;
   SENDMSG('___________________________________',Memo,TrayIcon1,StatusBar1,clBlue);
   SENDMSG('Fin ('+TimeToStr(Time)+'), '+QErrores.ToString()+' error(es).',Memo,TrayIcon1,StatusBar1);
   If VarGlo.getBeep() Then Beep;
end;
Procedure TFdeFile.ProcesoSubDir(RutaBase:String;var Memo:TRichMemo;var TrayIcon1:TTrayIcon;var StatusBar1:TStatusBar);
var
 Archivo: TextFile;
 FilaRead, DatoRead, TipoRead, mensaje:String;
 Color: TColor;
begin
   Fila:=0;
   Color:=clDefault;
   SENDMSG('___________________________________',Memo,TrayIcon1,StatusBar1,clBlue);
   SENDMSG('Procesando .\'+Utils.LastDirName(RutaBase),Memo,TrayIcon1,StatusBar1,clBlue);
   try
    AssignFile(Archivo, fdefilepath);
    ReSet(Archivo);
    while not eof(Archivo) do
    begin
      Fila:=Fila+1;
      ReadLn(Archivo, FilaRead);
      FilaRead:=Trim(FilaRead);
      TipoRead:=getTipo(FilaRead);
      DatoRead:=getDato(FilaRead);
      Color:=clDefault;
      if (TipoRead='MSGRUN') then
          Mensaje:=MsgUsr(DatoRead,Color);
      if (Color=clDefault) and ((DatoRead.IsEmpty) Or (FilaRead.Length<8)) then
          Mensaje:=MsgErr(FilaRead,'Sintaxis incorrecta, archivo .fde',Color);
      If (Color=clDefault) and (TipoRead.substring(3)='FIL')
          and ((DatoRead[DatoRead.Length]='\') OR (DatoRead[DatoRead.Length]='/')) then
          Mensaje:=MsgErr(FilaRead,'Sintaxis incorrecta, archivo .fde',Color);
      If Color=clDefault then
         begin
           DatoRead:=Utils.clearDirPath(DatoRead);
           case TipoRead of
             'CHKFIL': CHKFIL(RutaBase,FilaRead,mensaje,Color);
             'CHKDIR': CHKDIR(RutaBase,FilaRead,mensaje,Color);
             'CLRDIR': CLRDIR(RutaBase,FilaRead,mensaje,Color);
             'CREDIR': CREDIR(RutaBase,FilaRead,mensaje,Color);
             'DELFIL': DELFIL(RutaBase,FilaRead,mensaje,Color);
             'DELDIR': DELDIR(RutaBase,FilaRead,mensaje,Color);
             else
               Mensaje:=MsgErr(FilaRead,'Sintaxis incorrecta, archivo .fde',Color);
           end;
        end;
      SENDMSG(Mensaje,Memo,TrayIcon1,StatusBar1,Color);
    end;
    CloseFile(Archivo);
   except
      on E: EInOutError do
      ShowMessage('Ha ocurrido un error en el manejo del fichero. Detalles: '+ E.Message);
   end;
end;

Function TFdeFile.CheckFile(FilePath:String):Boolean;
var
 Archivos: TStringList;
begin
 Archivos := TStringList.Create;
 FindAllFiles(Archivos, ExtractFilePath(FilePath), ExtractFileName(FilePath), false);
 Result:=(Archivos.Count>0);
 Archivos.Free;
end;

Function TFdeFile.CheckDir(DirPath:String):Boolean;
var
 Directorios: TStringList;
begin
 Directorios := TStringList.Create;
 if DirPath.Substring((DirPath.Length-2)) = '\*' then
  begin
    DirPath:=DirPath.Substring(0,(DirPath.Length-1));
    FindAllDirectories(Directorios, DirPath, False);
    Result:=Directorios.Count>0;
  end
 else
  begin
    DirPath:=Utils.clearDirPath(DirPath);
    Result:=DirectoryExists(DirPath);
  end;
  Directorios.Free;
end;

Procedure TFdeFile.CHKFIL(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
var
 FilePath:String;
begin
 FilePath:=Utils.clearFilePath(RutaBase+getDato(FilaRead));
 If CheckFile(FilePath) then
    Mensaje:=MsgOK(FilaRead,Color)
 else
    Mensaje:=MsgErr(FilaRead,'No Encontrado.',Color);
end;
Procedure TFdeFile.CHKDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
var
 FilePath:String;
begin
 FilePath:=Utils.clearFilePath(RutaBase+getDato(FilaRead));
 If CheckDir(FilePath)=True then
    Mensaje:=MsgOK(FilaRead,Color)
 else
    Mensaje:=MsgErr(FilaRead,'No Encontrado.',Color);
end;

Procedure TFdeFile.CLRDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
var
 FilePath,fileshort:String;
 Resp:Integer;
begin
 FilePath:=Utils.clearDirPath(RutaBase+getDato(FilaRead));
 FileShort:=FilePath.Substring(RutaBase.Length);
 If VarGlo.getConfirmDel() Then
     Resp := Application.MessageBox(Pchar('Desea LIMPIAR la Carpeta:'+sLineBreak+fileshort), '', (MB_ICONQUESTION + MB_OKCANCEL))
 else
     Resp:=IDOK;
 If (Resp=IDOK) Then DeleteDirectory(FilePath,true);
 If DirectoryExists(FilePath) Then
     Mensaje:=MsgOK(FilaRead,Color)
 else
     Mensaje:=MsgErr(FilaRead,'Directorio no Existe',Color)
end;
Procedure TFdeFile.CREDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
var
 FilePath:String;
 Cta:integer;
begin
  Cta:=0;
  FilePath:=Utils.clearDirPath(RutaBase+getDato(FilaRead));
  IF Not Utils.CheckNoMaskName(FilePath) then
   Begin
     Mensaje:=MsgErr(FilaRead,'Nombre No Valido',color);
     Exit;
   end;
   If Not DirectoryExists(FilePath) Then
    Begin
       CreateDir(FilePath);
       Cta:=1;
    end;

   If DirectoryExists(FilePath) Then
      Mensaje:=MsgOK(FilaRead,Color,Cta.ToString+' Creado(s)')
   else
      Mensaje:=MsgErr(FilaRead,'No se Pudo Crear Directorio',Color);
end;

Procedure TFdeFile.DELFIL(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
var
 FilePath,FileShort:String;
 Archivos: TStringList;
 Resp,i,cta:Integer;
 IsOk:Boolean;
begin
 Cta:=0;
 IsOk:=True;
 FilePath:=Utils.clearFilePath(RutaBase+getDato(FilaRead));

 //Busqueda Por Patron
 If (FilePath.IndexOf('*')>-1) Or (FilePath.IndexOf('?')>-1) then
  begin
     Archivos := TStringList.Create;
     FindAllFiles(Archivos, ExtractFilePath(FilePath), ExtractFileName(FilePath), false);
     Cta:=Archivos.Count;
     for i := 0 to Archivos.Count - 1 do
     begin
       FileShort:=Archivos[i].Substring(RutaBase.Length);
       If VarGlo.getConfirmDel() Then
         Resp := Application.MessageBox(PCHar('Desea Eliminar el archivo:'+sLineBreak+FileShort), '', (MB_ICONQUESTION + MB_OKCANCEL))
       else
         Resp:=IDOK;
       If (Resp=IDOK) Then DeleteFile(Archivos[i]);
     end;
     Archivos.Clear;
     FindAllFiles(Archivos, ExtractFilePath(FilePath), ExtractFileName(FilePath), false);
     IsOk:=(Archivos.Count=0);
     ArChivos.Free;
  end
 else
 Begin
 //Busqueda Directa
 If FileExists(FilePath) Then
  Begin
   Cta:=1;
   FileShort:=FilePath.Substring(RutaBase.Length);
   If VarGlo.getConfirmDel() Then
     Resp := Application.MessageBox(PCHar('Desea Eliminar el archivo:'+sLineBreak+FileShort), '', (MB_ICONQUESTION + MB_OKCANCEL))
   else
     Resp:=IDOK;
   If (Resp=IDOK) Then DeleteFile(FilePath);
   IsOk:=Not(FileExists(FilePath));
  end;
 end;
 //Comprobación
   If IsOk Then
    Mensaje:=MSGOK(FilaRead,Color,cta.ToString+' Eliminado(s).')
   else
    Mensaje:=MsgErr(FilaRead,'No fue posible eliminar el(los) archivo(s).',Color);
 end;

Procedure TFdeFile.DELDIR(RutaBase,FilaRead:String; var Mensaje:String; var Color:TColor);
var
 FilePath:String;
 Resp,Cta:Integer;
begin
 Cta:=0;
 FilePath:=Utils.clearDirPath(RutaBase+getDato(FilaRead));
 If DirectoryExists(FilePath) then
  begin
    Cta:=1;
    If VarGlo.getConfirmDel() Then
       Resp := Application.MessageBox(PChar('Desea Eliminar el Directorio:'+sLineBreak+FilePath), '', (MB_ICONQUESTION + MB_OKCANCEL))
    else
       Resp:=IDOK;
    If (Resp=IDOK) Then DeleteDirectory(FilePath,False);
  end;

 If DirectoryExists(FilePath) Then
    Mensaje:=MsgErr(FilaRead,'No se pudo eliminar el directorio',Color)
 else
    Mensaje:=MsgOK(FilaRead,Color,Cta.ToString+' Eliminado(s).');
end;
Procedure TFdeFile.SENDMSG(Texto:String;var Memo:TRichMemo;var TrayIcon1:TTrayIcon;var StatusBar1:TStatusBar;color:Tcolor = clDefault);
var Mostrar : Boolean;
Begin
  Mostrar:=True;
  If (color=clLtGray ) and ((Varglo.getMostrarOK()) = False) then Mostrar:=False;
  If (color=clRed )    and ((Varglo.getMostrarERR())= False) then Mostrar:=False;
  IF (color=clBlack )  and ((Varglo.getMostrarMSJ())= False) then Mostrar:=False;
  If  Mostrar Then Utils.addToRichMemo(Texto,Memo,StatusBar1,color);

  TrayIcon1.Hint:=Texto;
  TrayIcon1.BalloonHint:=Texto;
  StatusBar1.SimpleText:=Texto;
  //TrayIcon1.ShowBalloonHint;
end;

{MANEJADOR DE ARCHIVO FDE}

Function TFdeFile.getRowCount():Integer;
var
 Archivo: TextFile;
 FilaRead:String;
begin
   Result:=0;
   try
    AssignFile(Archivo, fdefilepath);
    ReSet(Archivo);
    while not eof(Archivo) do
    begin
      Result:=Result+1;
      ReadLn(Archivo, FilaRead);
    end;
    CloseFile(Archivo);
   except
      on E: EInOutError do
      ShowMessage('Ha ocurrido un error en el manejo del fichero. Detalles: '+ E.Message);
   end;
end;
Procedure TfdeFile.toValuelist(var ValueListEditor1:TValueListEditor);
var
 Archivo: TextFile;
 FilaRead:String;
begin
   FilaRead:='';
   ValueListEditor1.Clear;
   try
    AssignFile(Archivo, fdefilepath);
    ReSet(Archivo);
    while not eof(Archivo) do
    begin
      ReadLn(Archivo, FilaRead);
      ValueListEditor1.Strings.Add(FilaRead);
    end;
    CloseFile(Archivo);
   except
      on E: EInOutError do
      ShowMessage('Ha ocurrido un error en el manejo del fichero. Detalles: '+ E.Message);
   end;
end;

Function TFdeFile.getRow(index:Integer):String;
var
 Archivo: TextFile;
 i:integer;
 FilaRead:String;
begin
   I:=0;
   Result:='';
   try
    AssignFile(Archivo, fdefilepath);
    ReSet(Archivo);
    while not eof(Archivo) do
    begin
      I:=I+1;
      ReadLn(Archivo, FilaRead);
      if I=Index Then
       Begin
         Result:=FilaRead;
         break;
       end;
    end;
    CloseFile(Archivo);
   except
      on E: EInOutError do
      ShowMessage('Ha ocurrido un error en el manejo del fichero. Detalles: '+ E.Message);
   end;
end;
Procedure TFdeFile.SaveFromValueList(ValueListEditor1:TValueListEditor);
var
 Archivo: TextFile;
 i,x:Integer;
 Tienedatos:Boolean;
begin
   fdefile:=TIniFile.Create(fdefilepath);
   fdefile.Free;
   try
    AssignFile(Archivo,Utils.clearFilePath(FdeFilePath));
    Rewrite(Archivo);
    x:=(ValueListEditor1.RowCount-2);
    TieneDatos:=Not Trim(ValueListEditor1.Strings.Text).IsEmpty;
    If (TieneDatos) Then
    For i:=0 to x do
     begin
       WriteLn(Archivo,ValueListEditor1.Strings[(i)]);
     end;
    CloseFile(Archivo);
    fdefile:=TIniFile.Create(fdefilepath);
   except
      on E: EInOutError do
      ShowMessage('Ha ocurrido un error en el manejo del fichero. Detalles: '+ E.Message);
     on E: Exception do
      ShowMessage( 'Error: '+ E.ClassName + #13#10 + E.Message );
   end;
end;
Procedure TFdeFile.SaveFromStringGrid(StringGrid:TStringGrid);
var
 Archivo: TextFile;
 i,x:Integer;
 Tienedatos:Boolean;
begin
   fdefile.Free;
   try
    AssignFile(Archivo,Utils.clearFilePath(FdeFilePath));
    Rewrite(Archivo);
    x:=(StringGrid.RowCount-1);
    TieneDatos:=Not (StringGrid.RowCount<=1);
    If (TieneDatos) Then
    For i:=1 to x do
     begin
       WriteLn(Archivo,trim(StringGrid.Cells[1,i])+'='+Trim(StringGrid.Cells[2,i]));
     end;
    CloseFile(Archivo);
    fdefile:=TIniFile.Create(fdefilepath);
   except
      on E: EInOutError do
      ShowMessage('Ha ocurrido un error en el manejo del fichero. Detalles: '+ E.Message);
     on E: Exception do
      ShowMessage( 'Error: '+ E.ClassName + #13#10 + E.Message );
   end;

end;

Procedure TFdeFile.Free();
begin
   fdefile.Free;
   Utils.Free;
   VarGlo.Free;
end;



end.

