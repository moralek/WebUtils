{*
    http://romansg.clubdelphi.com/
    Creditos a Roman del ClubDelphi, todo este codigo es obra suya

    Con sólo agregar esta unidad al comienzo de la cláusula uses del archivo dpr de tu proyecto, evitarás que la aplicación pueda ejecutarse más de una vez al mismo tiempo.

    Cuando una segunda instancia comienza a ejecutarse, el código de la unidad la cancela y activa automáticamente la instancia anterior

    Fuentes originales: http://romansg.clubdelphi.com/descarga.php?id=uiapp (version para VCL)
    Mas informacion: http://romansg.clubdelphi.com/index.php?pg=uiapp

    Esta unit es una adaptacion para que funcione en la plataforma FireMonkey (FMX)

    Probado en Delphi XE7
*}

unit UIApp_fmx;

interface

implementation

uses
  Windows, SysUtils, Forms,base.inc;

const
  { Cadenas para registrar el mutex y el mensaje }
  sMutex   = '10D73234-C9F7-4C2D-BC7E-39B5820AF456';
  sActivar = '3F154732-CCDE-4BC7-9439-AFCD3BCFA84D';

var
  mActivar    : Cardinal; { Mensaje para activar la instancia anterior }
  Mutex       : Cardinal; { Mutex                                      }
  PrevWndProc : TFarProc; { Procedimiento de ventana original          }


function AppWndProc(Handle: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LongInt; stdcall;
var
  FgThreadId  : DWORD; { Hilo de la app. que tenga el foco }
  AppThreadId : DWORD; { Hilo de nuestra aplicación        }

begin
  if Msg = mActivar then
  begin
    { Si está minimizada basta restaurarla }
    if IsIconic(Handle) then
      ShowWindow(Handle, SW_RESTORE)
    else
    begin
      { Obtener los hilos }
      FgThreadId  := GetWindowThreadProcessId(GetForegroundWindow, nil);
      AppThreadId := GetWindowThreadProcessId(Handle, nil);

      { Anexar el hilo de nuestra app. al de la  que tenga el foco }
      AttachThreadInput(AppThreadId, FgThreadId, true);

      { Ahora sí, activar la applicación }
      SetForegroundWindow(Handle);

      { Separar el hilo de nuestra app de la otra }
      AttachThreadInput(AppThreadId, FgThreadId, false);
    end;

    Result := 0;
  end
  else
    { Dejar que el procedimiento original se encargue de los otros mensajes }
    Result := CallWindowProc(PrevWndProc, Handle, Msg, wParam, lParam);
end;

procedure Activar;
begin
  { Mandamos el mensaje a todas las ventanas }
  SendMessage(HWND_BROADCAST, mActivar, 0, 0);
end;

procedure Registrar;
var _HWND: cardinal;
begin
  mActivar := RegisterWindowMessage(sActivar);
  Mutex    := CreateMutex(nil, true, sMutex);

  { Si ya existe el mutex lanzamos una excepción silenciosa }
  if GetLastError = ERROR_ALREADY_EXISTS then
  begin
   Mutex := 0;
   abort;
  end
  else
  begin
    { Sustituimos el procedimiento de ventana }
        Application.MainForm:= TCommonCustomForm.Create(NIL);
        _HWND := WindowHandleToPlatform(Application.MainForm.Handle).Wnd;
        Application.MainForm.Free;
        PrevWndProc := TFarProc(GetWindowLong(_HWND, GWL_WNDPROC));
        SetWindowLong(_HWND, GWL_WNDPROC, LongWord(@AppWndProc));
  end;
end;

initialization
  try
    Registrar;
  except
    Activar;
    Halt;
  end;

finalization
  if Mutex <> 0 then ReleaseMutex(Mutex);
end.

